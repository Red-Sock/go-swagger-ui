window.onload = function () {
    //<editor-fold desc="Changeable Configuration Block">

    // the following lines will be replaced by docker/configurator, when it runs in a docker-container
    const swaggerConfig = {
        dom_id: '#swagger-ui',
        presets: [
            SwaggerUIBundle.presets.apis,
            SwaggerUIStandalonePreset
        ],

        docExpansion: blankToUndefined('{{ .DocExpansion }}'),
        defaultModelExpandDepth: blankToUndefinedNumber('{{ .DefaultModelExpandDepth }}'),
        defaultModelsExpandDepth: blankToUndefinedNumber('{{ .DefaultModelsExpandDepth }}'),
        defaultModelRendering: blankToUndefined('{{ .DefaultModelRendering }}'),
        queryConfigEnabled: blankToUndefinedBool('{{ .QueryConfigEnabled }}'),
        supportedSubmitMethods: blankToUndefinedArray('{{ .SupportedSubmitMethods }}') || ["get", "put", "post", "delete", "options", "head", "patch", "trace"],
        deepLinking: blankToUndefinedBool('{{ .DeepLinking }}'),
        showMutatedRequest: blankToUndefinedBool('{{ .ShowMutatedRequest }}'),
        showExtensions: blankToUndefinedBool('{{ .ShowExtensions }}'),
        showCommonExtensions: blankToUndefinedBool('{{ .ShowCommonExtensions }}'),
        filter: blankToUndefined('{{ .Filter }}') || blankToUndefinedBool('{{ .FilterString }}'),
        displayOperationId: blankToUndefinedBool('{{ .DisplayOperationId }}'),
        tryItOutEnabled: blankToUndefinedBool('{{ .TryItOutEnabled }}'),
        displayRequestDuration: blankToUndefinedBool('{{ .DisplayRequestDuration }}'),
        persistAuthorization: blankToUndefinedBool('{{ .PersistAuthorization }}'),
        withCredentials: blankToUndefinedBool('{{ .WithCredentials }}'),
        oauth2RedirectUrl: blankToUndefined('{{ .OAuth2RedirectUrl }}'),
        layout: blankToUndefined('{{ .Layout }}') || "StandaloneLayout",
        // layout: 'StandaloneLayout',
        validatorUrl: blankToUndefined('{{ .ValidatorURL }}'),
        maxDisplayedTags: blankToUndefinedNumber('{{ .MaxDisplayedTags }}'),
    };

{{ if .ConfigURL }}
    swaggerConfig.configUrl = '{{ .ConfigURL }}'
{{ else if .Spec }}
    swaggerConfig.spec = parseJson(decodeBase64(blankToUndefined('{{ .Spec }}')))
{{ else if .URL }}
    swaggerConfig.url = blankToUndefined('{{ .URL }}')
{{ else if .URLs }}
    swaggerConfig.urls = blankToUndefinedObject('{{ .URLs }}')
    swaggerConfig.urls.primaryName = blankToUndefined('{{ .PrimaryURL }}')
{{ end }}

    swaggerConfig.plugins = [
        SwaggerUIBundle.plugins.DownloadUrl, {{ range .Plugins }}
        {{ . }},{{ end }}
    ]

    window.ui = SwaggerUIBundle(swaggerConfig)

    //</editor-fold>
};


function blankToUndefined(input) {
    return (input || '').trim() === '' ? undefined : input
}

function blankToUndefinedNumber(input) {
    let cleanInput = blankToUndefined(input)
    if (!cleanInput) {
        return undefined
    }

    const parsed = parseInt(cleanInput, 10);
    if (isNaN(parsed)) {
        return undefined;
    }

    return parsed
}

function blankToUndefinedBool(input) {
    if (input === 'true') return true;
    if (input === 'false') return false;
    return undefined
}

function blankToUndefinedArray(input) {
    const arr = input.split(",").map(blankToUndefined).filter(e => !!e)
    if ((arr || []).length === 0) {
        return undefined
    }

    return arr
}

function blankToUndefinedObject(input) {
    if (!input) {
        return undefined
    }

    input = input.trim()
    if (input.length === 0) {
        return undefined
    }

    input = decodeBase64(input);

    return JSON.parse(input)
}

function decodeBase64(str) {
    if (!str) {
        return undefined
    }

    const percentEncodedStr = atob(str || '').split('').map(c => {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join('');

    return decodeURIComponent(percentEncodedStr);
}


function parseJson(str) {
    if (!str) {
        return undefined
    }

    return JSON.parse(str);
}

function extractPlugins(input) {
    const plugins = []
    const pluginsIn = input.split(",").map(blankToUndefined).filter(e => !!e)
    for (const i in pluginsIn) {
        switch (pluginsIn[i]) {
            case 'SwaggerUIBundle.plugins.TopBar':
                plugins.push(SwaggerUIBundle.plugins.TopBar)
        }
    }
    return plugins
}